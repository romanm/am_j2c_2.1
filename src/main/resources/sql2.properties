sql2.j2c.updateCellWithConstraint: \
UPDATE doc SET reference2=:reference2 WHERE doc_id=:doc_id

sql2.j2c.insertCellWithConstraint: \
INSERT INTO doc (doctype, doc_id, parent_id, reference, reference2) \
VALUES (10, :nextDbId1, :parent_id, :reference, :reference2); \

sql2.j2c.insertRow: \
INSERT INTO doc (doctype, doc_id, parent_id) \
VALUES (9, :nextDbId1, :tbl_id); \

sql2.j2c.deleteRowId: \
delete from string where string_id in (SELECT doc_id FROM doc where parent_id=:row_id); \
delete from integer where integer_id in (SELECT doc_id FROM doc where parent_id=:row_id); \
DELETE FROM doc WHERE parent_id=:row_id; \
DELETE FROM doc WHERE doc_id=:row_id; \

#COMMIT
#SET LOCK_MODE 1; \

sql2.string.insertRowId: \
INSERT INTO doc (doctype, doc_id, parent_id, reference) \
VALUES (10, :nextDbId1, :row_id, :cln_id); \
INSERT INTO string (string_id, value) VALUES (:nextDbId1, :value)
sql2.integer.insertRowId: \
INSERT INTO doc (doctype, doc_id, parent_id, reference) \
VALUES (10, :nextDbId1, :row_id, :cln_id); \
INSERT INTO integer (integer_id, value) VALUES (:nextDbId1, :value)

sql2.string.updateById: \
UPDATE string SET value=:value WHERE string_id=:data_id
sql2.integer.updateById: \
UPDATE integer SET value=:value WHERE integer_id=:data_id

sql2.table.select: \
${sql2.join_columns.select}; \
${sql2.table1.select};

sql2.table1.select: \
SELECT rws.parent_id tbl_id, rws.doc_id row_id\n\
:add_columns\n\
FROM doc tbl, doc rws \
:add_joins\n\
WHERE tbl.doc_id=:table_id AND tbl.doc_id=rws.parent_id AND rws.doctype=9\n\

sql2.join_columns.select: \
SELECT '\nLEFT JOIN ('||x.joins_select||') '||col_key||' ON column_'||cln_id||'_id='||cln_id||' AND '||col_key||'_row=rws.doc_id ' add_joins\n \
, ', '||col_key||'_id, '||col_key add_columns\n\
, x.* FROM (\n\
SELECT CASEWHEN(docbody is not null, docbody, 'SELECT doc_id '||col_key||'_id, value '||col_key||', parent_id '||col_key||'_row, reference column_'||cln_id||'_id '\n\
||' FROM doc cd, '||col_table_name||' cv ' \
||'\n WHERE cd.doc_id=cv.'||col_table_name||'_id AND doctype=10') joins_select\n\
, value col_alias\n\
, x.* FROM (\n\
SELECT cln.doc_id cln_id, 'col_'||cln.doc_id col_key\n\
, CASEWHEN(clntype.doc_id=9768, 'string' , typevalue.value) col_table_name, clnbody.docbody\n \
 FROM doc cln left join docbody clnbody on docbody_id=cln.doc_id, doc clntype, string typevalue\n \
 WHERE cln.parent_id=:table_id AND cln.doctype=8\n \
 AND clntype.doc_id=cln.reference AND typevalue.string_id=clntype.doc_id\n  \
 ) x, string WHERE cln_id=string_id) x

sql2.icd10value.seek: \
SELECT * FROM doc d, (${sql2.icd10.select1}) x WHERE x.doc_id=d.doc_id AND parent_id=:parent_id

sql2.icd10.seek: \
SELECT * FROM (${sql2.icd10.select1}) x \
WHERE LOWER(icd_name) LIKE LOWER(:seek) \
OR LOWER(icd_code) LIKE LOWER(:seek) \
LIMIT 10

sql2.icd10.select: \
${sql2.icd10.select1} LIMIT 20

sql2.icd10.select1: \
SELECT d.doc_id, i.* FROM icd i, doc d, icd10uatree t \
where i.icd_id=icd10uatree_id and t.doc_id=d.doc_id and  doctype=:doctype

sql2.icpc2.select: \
SELECT * FROM ( \
${sql2.icpc2.select1} \
) x LIMIT 10

sql2.icpc2.seek: \
SELECT * FROM (${sql2.icpc2.select1}) x \
WHERE LOWER(value) LIKE LOWER(:seek) \
OR LOWER(code) LIKE LOWER(:seek) \
LIMIT 20

sql2.icpc2.select1: \
SELECT c1.code||c2.code code, s2.value, d2.doc_id, d2.parent_id, s1.value part, d2.doctype \
FROM string s2, doc d1, doc d2, string s1, code c2, code c1 \
WHERE d1.doc_id=d2.parent_id AND d1.doctype=57 \
AND s2.string_id=d2.doc_id \
AND s1.string_id=d1.doc_id \
AND c2.code_id=d2.doc_id \
AND c1.code_id=d1.doc_id

sql2.ddtable.select: \
${sql2.stringDocType.select} UNION \
SELECT parent_id,doc_id,value name FROM ( \
SELECT * FROM doc d1, string s1 where  d1.doctype=7 and s1.string_id=d1.doc_id \
) x


sql2.stringDocType.select: \
SELECT parent_id,doc_id,value name FROM ( \
SELECT * FROM doc d1, string s1 where  d1.doctype=:doctype and s1.string_id=d1.doc_id \
) x

sql.msp.msp_ehealth_response.select: \
SELECT * FROM doc, docbody \
WHERE doc_id=docbody_id AND doctype=:MSP_EHEALT_RESPONSE_type AND parent_id=:msp_id;

sql.medical.selectDoctorByMsp: \
SELECT d.* FROM ( ${sql.medical.selectEmployeerByMsp}) d, user_roles ur \
WHERE ur.username=d.username AND role='ROLE_USER' \
ORDER BY person_id DESC

sql.medical.selectEmployeerByMsp: \
SELECT e.* FROM (SELECT username, p.* FROM users u, person p where person_id=user_id) e  \
LEFT JOIN doc ON parent_id=person_id  \
WHERE reference =:msp_id \
ORDER BY person_id DESC

sql.msp_ehealth_response.select: \
SELECT * FROM doc, docbody \
WHERE doc_id=docbody_id AND doctype=:MSP_EHEALT_RESPONSE_type AND parent_id=:msp_id;

sql.msp_division.select: \
SELECT * FROM doc, docbody \
WHERE doc_id=docbody_id AND doctype=16 AND doc_id=:msp_division_id 

sql.msp_divisions.select: \
SELECT * FROM doc, docbody \
WHERE doc_id=docbody_id AND doctype=16 AND parent_id=:msp_id

sql.db1.users.fromUsername: \
SELECT * FROM users LEFT JOIN person ON person_id=user_id WHERE username=:username

sql.db1.user.msp: \
SELECT * FROM doc ul, msp WHERE parent_id=:user_id AND reference=msp_id

sql.msp.msp_access_token.read: \
SELECT dt.doctype, db.docbody FROM doc d, doc d2, doctype dt, docbody db \
WHERE d2.parent_id=:msp_id AND d.doc_id=db.docbody_id AND d.doctype=doctype_id \
AND d2.doc_id=d.parent_id AND d.doctype IN (54,55)

sql.msp_employee.select: \
${sql.msp_employee.list}; \
${sql.msp_employee.role.list}

sql.msp_employee.role.list: \
SELECT user_id, r.*, ur.user_role_id FROM user_roles ur, users u, roles r WHERE role_id=role AND u.username=ur.username \
AND user_id IN (SELECT person_id FROM (${sql.msp_employee.list}) x)

sql.msp_employee.list: \
SELECT p.*, username FROM person p, users u, doc dEmployee, doc dMsp \
WHERE dEmployee.doctype = 13 \
AND person_id=dEmployee.doc_id AND person_id=u.user_id \
AND dMsp.parent_id=dEmployee.doc_id AND dMsp.reference=:msp_id

sql.docbody_byId.select: \
SELECT docbody FROM docbody WHERE docbody_id=:doc_id
