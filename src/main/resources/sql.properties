sql.program_folder.select: \
SELECT * FROM doc dFolder, string dirName WHERE doc_id=string_id AND doctype=10

sql.program_files.select: \
SELECT b.*,doc_type, parent FROM docbody b, ( \
SELECT program.*, dty.doctype doc_type FROM doc program, doctype dty WHERE program.doctype=dty.doctype_id AND dty.parent_id=9 \
) x WHERE doc_id=docbody_id AND parent=:folderId


sql.integer.update: \
UPDATE integer SET value=:value WHERE integer_id=:data_id

sql.string.update: \
UPDATE string SET value=:value WHERE string_id=:data_id

sql.folders.select: \
SELECT parent,doc_id folder_id,value folder_name FROM ( \
SELECT * FROM doc d1, string s1 where  d1.doctype=14 and s1.string_id=d1.doc_id \
) x

sql.folders.insert: \
${sql.docString.insert}

sql.docString.insert: \
INSERT INTO doc (doctype, doc_id, parent) VALUES (:doctype, :nextDbId1, :parent); \
INSERT INTO string (value, string_id) VALUES (:value, :nextDbId1);

sql.tables.folder.select: \
SELECT * FROM ( ${sql.tables.select} ) x WHERE parent=:folder_id

sql.tables.select: \
SELECT parent, doc_id row_id, value col_tablename, string_id col_tablename_id FROM ( \
SELECT * FROM doc d1, string s1 where  d1.doctype=1 and s1.string_id=d1.doc_id \
) x
#SELECT doc_id row_id, value col_tablename, string_id col_tablename_id \
#FROM doc d, string s WHERE d.doc_id=s.string_id AND doctype=1

#SELECT * FROM doc d, string s WHERE d.doc_id=s.string_id AND doctype=1

sql.columns.insert: \
${sql.docString.insert}; \
UPDATE doc SET (reference)=( \
SELECT doc_id FROM string, doc WHERE doc_id=string_id AND value=:fieldtype \
) WHERE doc_id=:nextDbId1

sql.table.insert: \
${sql.docString.insert}

sql.table_row.insert: \
INSERT INTO doc (doctype, doc_id, parent) VALUES (4, :nextDbId1, :table_id)

sql.table_cell.insert: \
INSERT INTO doc (doctype, doc_id, parent, reference) VALUES (5, :nextDbId1, :row_id, :column_id); \
INSERT INTO :valueTableName (value, :valueTableName_id) VALUES (:value, :nextDbId1);

sql.table.select: \
${sql.join_columns.select}; \
${sql.table1.select};

sql.table1.select: \
SELECT rws.parent tbl_id, rws.doc_id row_id\n\
:add_columns\n\
FROM doc tbl, doc rws \
:add_joins\n\
WHERE tbl.doc_id=:table_id AND tbl.doc_id=rws.parent AND rws.doctype=4\n\

sql.join_columns.select: \
SELECT '\nLEFT JOIN ('||x.joins_select||') '||col_key||' ON column_'||cln_id||'_id='||cln_id||' AND '||col_key||'_row=rws.doc_id ' add_joins\n \
, ', '||col_key||'_id, '||col_key add_columns\n\
, x.* FROM (\n\
SELECT 'SELECT doc_id '||col_key||'_id, value '||col_key||', parent '||col_key||'_row, reference column_'||cln_id||'_id '\n\
||' FROM doc cd, '||col_table_name||' cv ' \
||'\n WHERE cd.doc_id=cv.'||col_table_name||'_id AND doctype=5' joins_select\n\
, value col_alias\n\
, x.* FROM (\n\
SELECT tbl.doc_id table_id, cln.doc_id cln_id, 'col_'||cln.doc_id col_key\n\
, CASEWHEN(clntype.doc_id=2, 'string' , typevalue.value) col_table_name\n \
 FROM doc tbl, doc cln , doc clntype, string typevalue\n \
 WHERE tbl.doc_id=:table_id AND tbl.doc_id=cln.parent AND cln.doctype=8\n \
 AND clntype.doc_id=cln.reference AND typevalue.string_id=clntype.doc_id\n  \
 ) x, string WHERE cln_id=string_id) x

sql.create_table.select: \
SELECT * FROM (${sql.create_tables.select}) x WHERE table_id=:table_id

sql.create_tables.select: \
SELECT d1.doc_id table_id, d2.doc_id column_id, s1.value tablename ,s2.value fieldname ,rs2.value fieldtype \
FROM doc d1, doc d2, doc r2, string rs2, string s1, string s2 \
WHERE d1.doc_id=d2.parent AND d1.doctype=1 \
AND s1.string_id=d1.doc_id \
AND s2.string_id=d2.doc_id \
AND d2.reference=r2.doc_id \
AND rs2.string_id=r2.doc_id

sql.nextDbId: \
SELECT nextval('dbid');
